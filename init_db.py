import asyncio

from database import engine, Base, get_session
from models import Role, Permission


async def create_permission(permission: str) -> Permission:
    async with get_session() as session:        
        permission = Permission(name=permission)
        session.add(permission)
        await session.commit()
        return permission

async def create_role(role: str) -> Role:
    async with get_session() as session:
        role = Role(name=role)
        session.add(role)
        await session.commit()
        return role


roles = [
    "Суперадминистратор",
    "Модератор",
    "Администратор пользователей",
    "Администратор поддержки",
    "Финансовый администратор",
    "Контент-менеджер",
    "SMM менеджер"
]

permissions = [
    "Создание сотрудников",
    "Просмотр сотрудников",
    "Редактирование сотрудников",
    "Блокировка и разблокировка сотрудников",
    "Сброс паролей сотрудников",
    "Управление ролями сотрудников",
    "Управление правами сотрудников",
    "Просмотр журнала активности",
    "Доступ к настройкам и конфигурации системы",
    "Резервное копирование и восстановление данных",
    "Обновление и обслуживание системы",
    "Настройка интеграции с внешними системами",
    "Просмотр аналитики по вкладам",
    "Просмотр общей аналитики расходов",
    "Просмотр аналитики покупок MooGold",
    "Просмотр аналитики вывода товаров",
    "Просмотр аналитики по коэффициентам выигрыша и проигрыша",
    "Просмотр аналитики онлайн пользователей",
    "Просмотр аналитики зарегистрированных пользователей",
    "Экспорт аналитики",
    "Просмотр тикетов",
    "Ответ на тикеты",
    "Обновление статуса тикетов",
    "Перенаправление тикетов",
    "Добавление отзывов",
    "Просмотр отзывов",
    "Редактирование отзывов",
    "Ответ на отзывы",
    "Просмотр платежей",
    "Обновление статуса платежей",
    "Подтверждение и отклонение платежей",
    "Просмотр запросов на вывод",
    "Обновление статуса запросов на вывод",
    "Подтверждение и отклонение запросов на вывод",
    "Создание пользователей",
    "Просмотр пользователей",
    "Редактирование пользователей",
    "Блокировка и разблокировка пользователей",
    "Сброс паролей пользователей",
    "Создание кейсов",
    "Создание категорий кейсов",
    "Просмотр кейсов",
    "Просмотр категорий кейсов",
    "Редактирование кейсов",
    "Редактирование категорий кейсов",
    "Удаление кейсов",
    "Удаление категорий кейсов",
    "Создание настроек кейсов",
    "Просмотр настроек кейсов",
    "Редактирование настроек кейсов",
    "Удаление настроек предметов",
    "Добавление предметов",
    "Просмотр предметов",
    "Редактирование предметов",
    "Удаление предметов",
    "Создание конкурсов",
    "Просмотр конкурсов",
    "Редактирование конкурсов",
    "Удаление конкурсов",
    "Создание промокодов",
    "Просмотр промокодов",
    "Редактирование промокодов",
    "Удаление промокодов",
    "Создание реферальных кодов",
    "Просмотр реферальных кодов",
    "Редактирование реферальных кодов",
    "Удаление реферальных кодов"
]


async def init_database():
    from models import (
        Role,
        Permission,
        Administrator,
        User,
        Category,
        Case,
        Item,
        ItemCompound,
        RarityCategory,
    )

    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)


async def create_all_roles():
    tasks = [create_role(role) for role in roles]
    await asyncio.gather(*tasks)

async def create_all_permissions():
    tasks = [create_permission(permission_name) for permission_name in permissions]
    await asyncio.gather(*tasks)

async def main():
    await init_database()
    # await create_all_permissions()
    # await create_all_roles()

if __name__ == "__main__":
    asyncio.run(main())